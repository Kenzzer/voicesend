# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

project = builder.LibraryProject('voicesend.ext')
project.sources = [
  'extension.cpp',
  'netmessages.cpp',
  'voiceserver.cpp',
  'ringbuffer.cpp',
  'voicecodec_celt.cpp',
  os.path.join(Extension.sm_root, 'public', 'CDetour', 'detours.cpp'),
  os.path.join(Extension.sm_root, 'public', 'asm', 'asm.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'decode.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'itab.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-att.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-intel.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'udis86.c'),
  os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp'),
]

for sdk_name in Extension.sdks:
  sdk = Extension.sdks[sdk_name]

  for cxx in builder.targets:
    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue
    
    binary = Extension.HL2ExtConfig(project, builder, cxx, 'voicesend.ext.' + sdk.ext, sdk)
    binary.compiler.cxxincludes += [
      os.path.join(os.path.join(builder.currentSourcePath, 'celt'))
    ]
    Extension.link_libcelt(builder, binary.compiler)
    binary.compiler.includes += [ os.path.join(os.path.join(builder.currentSourcePath, '..', 'lib', 'celt', 'celt', 'libcelt')) ]
    if binary.compiler.behavior == 'gcc' or binary.compiler.behavior == 'clang':
      binary.compiler.cxxflags += ['-Wno-invalid-offsetof']

Extension.extensions = builder.Add(project)